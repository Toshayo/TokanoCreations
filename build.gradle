import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net/' }
		maven { url = 'https://plugins.gradle.org/m2' }
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.1') {
			changing = true
		}
	}
}

plugins {
	id "com.modrinth.minotaur" version "2.8.7"
	// It's safest to have this on 2.+ to get the latest features and
	// bug fixes without having to worry about breaking changes.
}

apply plugin: 'forge'


version = mod_version

compileJava.options.encoding = 'UTF-8'
java.sourceCompatibility = java.targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "run"

	replace "@@VERSION@@", project.version
	if(project.gradle.startParameter.taskNames.size() > 0 && project.gradle.startParameter.taskNames.first().startsWith("run"))
		replace "@@ENVIRONMENT@@", "deobf"
	else
		replace "@@ENVIRONMENT@@", "obf"
}

repositories {
	gradlePluginPortal()
	maven {
		name = 'ModMaven'
		url = 'https://modmaven.dev'
	}
	maven {
		url = 'https://www.cursemaven.com/'
	}
}

dependencies {
	implementation 'curse.maven:baubles-227083:2224857'
	implementation 'curse.maven:thaumcraft-223628:2227552'

	implementation 'codechicken:CodeChickenCore:1.7.10-1.0.4.29:dev'
	compileOnly 'codechicken:CodeChickenCore:1.7.10-1.0.4.29:src'

	implementation 'codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev'
	compileOnly 'codechicken:CodeChickenLib:1.7.10-1.1.3.140:src'

	implementation 'codechicken:NotEnoughItems:1.7.10-1.0.3.74:dev'
	compileOnly 'codechicken:NotEnoughItems:1.7.10-1.0.3.74:src'

	implementation 'curse.maven:TravellersGear-224440:2262113'
}

processResources {
	inputs.property "version", mod_version
	inputs.property "credits", credits
	
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		
		// replace version and mcversion
		expand (
				mod_id: mod_id,
				version: mod_version,
				credits: credits
		)
	}
	// copy everything else, that's not the mcmod.info
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
	manifest {
		attributes([
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.version,
				"FMLCorePluginContainsFMLMod": "true",
				"FMLCorePlugin": "net.toshayo.tokanocreations.TokanoCreationsPlugin",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

build {
	doLast {
		if(project.hasProperty("TOSHAYO_JKS")) {
			println "Using Project properties for jar signing."
			def jks_file = TOSHAYO_JKS
			def passwd = TOSHAYO_PWD
			if (jks_file != null && passwd != null) {
				//noinspection HttpUrlsUsage
				def exec_line = [
						"jarsigner",
						"-sigalg", "SHA256withECDSA",
						"-digestalg", "SHA-256",
						"-keystore", jks_file,
						"-storepass", passwd,
						"-tsa", "http://timestamp.digicert.com",
						jar.archiveFile.get(), TOSHAYO_APP_ALIAS
				].execute()
				exec_line.waitFor()
				if(exec_line.exitValue() != 0) {
					throw new RuntimeException("Signing failed!")
				}
			}
		} else {
			println 'No signing secrets found, build will not be signed.'
		}
	}
}

modrinth {
	token = project.TOSHAYO_MODRINTH
	projectId = "tokanocreations"
	versionName = project.archivesBaseName + "_1.7.10_" + project.mod_version
	versionNumber = project.mod_version
	versionType = "release"
	uploadFile = jar.archiveFile.get()
	gameVersions = ["1.7.10"]
	loaders = ["forge"]

	if (Files.exists(Paths.get("changelog"))) {
		changelog = String.join("\r\n", Files.readAllLines(Paths.get("changelog")))
		tasks.modrinth.doLast {
			Files.move(Paths.get("changelog"), Paths.get("changelog.bak"), StandardCopyOption.REPLACE_EXISTING)
			Files.createFile(Paths.get("changelog"))
		}
	}
}

tasks.modrinth {
	doFirst {
		def tag_checker = ["git", "tag", "-l", "v" + mod_version].execute()
		tag_checker.waitFor()
		if(tag_checker.text.trim() != "v" + mod_version) {
			throw new RuntimeException("Version not tagged!")
		}
	}
}

tasks.modrinth.dependsOn(build)
